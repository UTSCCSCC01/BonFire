generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  engineType    = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  first_name         String
  last_name          String
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  role               Role?
  boards             Board[]
  cards              Card[]
  classrooms         Classroom[]
  student_classrooms StudentClassrooms[]
  assignments        Assignment[]
}

model StudentClassrooms {
  classroom_id Int
  student_id   Int
  created_at   DateTime  @default(now())
  classroom    Classroom @relation(fields: [classroom_id], references: [id])
  student      User      @relation(fields: [student_id], references: [id])

  @@id([classroom_id, student_id])
  @@index([student_id])
}

model Classroom {
  id          Int                 @id @default(autoincrement())
  token       String              @unique
  name        String
  created_at  DateTime            @default(now())
  updated_at  DateTime            @updatedAt
  creator_id  Int
  board_id    Int                 @unique
  board       Board               @relation(fields: [board_id], references: [id])
  creator     User                @relation(fields: [creator_id], references: [id])
  students    StudentClassrooms[]
  assignments Assignment[]

  @@index([creator_id])
}

model Board {
  id         Int         @id @default(autoincrement())
  title      String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted    Boolean     @default(false)
  user_id    Int
  user       User        @relation(fields: [user_id], references: [id])
  classroom  Classroom[]
  states     State[]

  @@index([user_id])
}

model State {
  id         Int       @id @default(autoincrement())
  board_id   Int
  title      String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted    Boolean   @default(false)
  order      Int
  type       StateType
  board      Board     @relation(fields: [board_id], references: [id])
  cards      Card[]

  @@index([board_id])
}

model Card {
  id             Int          @id @default(autoincrement())
  title          String
  desc           String?
  submit_url     String?
  creator_id     Int
  state_id       Int?
  assignment_id Int?
  order          Int
  due_date       DateTime?
  deleted    Boolean   @default(false)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  creator        User         @relation(fields: [creator_id], references: [id])
  Assignment    Assignment? @relation(fields: [assignment_id], references: [id])
  state          State?       @relation(fields: [state_id], references: [id])
  tags       Tag[]

  @@index([creator_id, state_id])
  @@index([assignment_id])
  @@index([state_id])
}

model Assignment {
  id             Int       @id @default(autoincrement())
  title          String
  desc           String?
  submit_url     String?
  creator_id     Int
  classroom_id   Int
  due_date       DateTime
  available_date DateTime?
  published_date DateTime?
  deleted        Boolean   @default(false)
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  creator        User      @relation(fields: [creator_id], references: [id])
  classroom      Classroom @relation(fields: [classroom_id], references: [id])

  cards Card[]
}

model Tag {
  id         Int      @id @default(autoincrement())
  label      String
  creator_id Int
  card_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  card       Card     @relation(fields: [card_id], references: [id])

  @@index([card_id])
  @@index([creator_id])
}

enum Role {
  Student
  Facilitator
}

enum StateType {
  TODO
  DONE
  CUSTOM
}
